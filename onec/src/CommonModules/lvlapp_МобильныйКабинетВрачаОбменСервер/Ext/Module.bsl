
#Область СлужебныеПроцедурыФункции

Функция ПрочитатьДанныеJson(Запрос)  Экспорт
	
	ТелоЗапроса  = Запрос.ПолучитьТелоКакСтроку();
	
	Если ТелоЗапроса = "" Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеЗапроса;
	
КонецФункции   

Функция ЗаписатьДанныеВJson(Данные) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные); 
	ДанныеJSON = ЗаписьJSON.Закрыть();
	
	Возврат ДанныеJSON;
	
КонецФункции  

Функция ПреобразоватьСтрокуВДату(Значение) Экспорт
	
	Попытка
		ЗначениеДата = Дата(Значение);
	Исключение
		ЗначениеДата = '00010101';
	КонецПопытки;
	
	Возврат ЗначениеДата;
	
КонецФункции  

Функция СформироватьСтруктуруОбязательныхРеквизитовСправочника(Значение) 
	
	Если не ЗначениеЗаполнено(Значение) Тогда
		Возврат Новый Структура("name, guid", "", ""); 
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("name", сфпОбщегоНазначения.сфпЗначениеРеквизитаОбъекта(Значение, "Наименование"));
	СтруктураДанных.Вставить("guid", Строка(Значение.УникальныйИдентификатор()));
	
	Возврат СтруктураДанных;
	
КонецФункции 

Функция СформироватьСтруктуруОбязательныхРеквизитовДокумента(Значение)
	
	Если не ЗначениеЗаполнено(Значение) Тогда
		Возврат Новый Структура("number, guid", "", ""); 
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("number", сфпОбщегоНазначения.сфпЗначениеРеквизитаОбъекта(Значение, "Номер"));
	СтруктураДанных.Вставить("guid", Строка(Значение.УникальныйИдентификатор()));
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьПревьюКартинки(ДанныеКартинки) Экспорт
	
	Картинка = Новый Картинка(ДанныеКартинки, Истина);
	Размер = ДанныеКартинки.Размер();
	МаксимальныйРазмер = 1024*300;  //Превью делаем, только если размер исходной картинки больше 300Кб
	
	Если Размер > МаксимальныйРазмер Тогда
		ОбрабатываемаяКартинка = Новый ОбрабатываемаяКартинка(Картинка);
		Попытка
			Если Картинка.ПлотностьПоВертикали() >= 150 Тогда
				ОбрабатываемаяКартинка.УстановитьПлотность(72, 72);
			КонецЕсли; 
		Исключение
			
		КонецПопытки;
		//ОбрабатываемаяКартинка.Масштабировать(Макс(10,Окр(100*МаксимальныйРазмер/Размер)));
		
		Ширина = Картинка.Ширина();
		МаксимальнаяШирина = 150;
		Если Ширина > МаксимальнаяШирина Тогда
			//ОбрабатываемаяКартинка.УстановитьРазмер(МаксимальнаяШирина,Окр(Картинка.Высота()/Ширина*МаксимальнаяШирина)); 
			НоваяШирина = МаксимальнаяШирина;
			НоваяВысота = Окр(Картинка.Высота()/Ширина*МаксимальнаяШирина);
			ОбрабатываемаяКартинка.УстановитьРазмер(НоваяШирина, НоваяВысота);
		КонецЕсли; 
		
		Если НоваяШирина > НоваяВысота Тогда 
			ОбрабатываемаяКартинка.Повернуть(-90);
		КонецЕсли;
		
		Картинка = ОбрабатываемаяКартинка.ПолучитьКартинку();
		
	КонецЕсли; 
	
	Возврат Картинка.ПолучитьДвоичныеДанные();
	
КонецФункции

Функция ПолучитьПревьюПоОсновномуФайлу(ПрисоединенныйФайл)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	lvlapp_Фотоснимки.Превью КАК Превью
	|ИЗ
	|	РегистрСведений.lvlapp_Фотоснимки КАК lvlapp_Фотоснимки
	|ГДЕ
	|	lvlapp_Фотоснимки.Фото = &Фото";
	Запрос.УстановитьПараметр("Фото", ПрисоединенныйФайл); 
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Превью;
	
КонецФункции

Функция ПолучитьПустойHTML(Заголовок)
	
	ТекстHTML = "<!doctype html>
	|<html lang=""ru"">
	|<head>
	|<style type=""text/css"">
	|.styletext {
	|color: black; 
	|font-size: 40px; 
	|font-family: Arial;
	|}
	|</style>
	|<meta charset=""utf-8"" />
	|<title>" + Заголовок + "</title> 
	|<div style=""margin-top:100px""><center><font class=""styletext"">" + Заголовок + "</center></font></div>
	|</head>
	|<body>
	|</body>
	|</html>";
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ПолучитьМетаданныеФото(Данные)
	
	СтрокаМетаданные = "Дата : " + ?(ЗначениеЗаполнено(Данные.DateTimeDigitized), Данные.DateTimeDigitized, Формат(Данные.ДатаСоздания, "ДФ='yyyy:MM:dd HH:mm:ss'")) + " 
	|Размер: " + Строка(Данные.Размер) + "
	|Расширение: " + Строка(Данные.Расширение) + "
	|Имя файла: " + Строка(Данные.НаименованиеФото);
	
	Если ЗначениеЗаполнено(Данные.PixelXDimension) Тогда
		СтрокаМетаданные = СтрокаМетаданные + "
		|Разрешение: " + Строка(Данные.PixelXDimension) + " X " + Строка(Данные.PixelYDimension);
	КонецЕсли;  
	
	Возврат СтрокаМетаданные;
	
КонецФункции

#КонецОбласти

#Область ПолучениеПотоковыхДанных 

Функция ПрочитатьСоставноеСодержимоеЗапроса(Запрос) Экспорт
	
	ПоляЗапроса = Новый Соответствие;
	
	РазделительПолей = ПолучитьРазделитьПолейСоставногоСодержимого(Запрос);	
	ОкончаниеПолей = "--";
	
	ТелоЗапроса = Запрос.ПолучитьТелоКакПоток();
	ЧтениеДанных = Новый ЧтениеДанных(ТелоЗапроса);
	
	ЕстьДанные = Истина;
	Пока ЕстьДанные Цикл
		
		РезультатЧтения = ЧтениеДанных.ПрочитатьДо(РазделительПолей);
		ЕстьДанные = РезультатЧтения.МаркерНайден;
		
		Если ЕстьДанные Тогда
			Строка = ЧтениеДанных.ПрочитатьСтроку();
			ЕстьДанные = (Строка <> ОкончаниеПолей);
		КонецЕсли; 
		
		Если РезультатЧтения.Размер = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Поток = РезультатЧтения.ОткрытьПотокДляЧтения();
		
		Поле = ПрочитатьПолеСоставногоСодержимогоИзПотока(Поток);
		ПоляЗапроса.Вставить(Поле.Имя, Поле);
		
		Поток.Закрыть();
		
	КонецЦикла; 
	
	ЧтениеДанных.Закрыть();
	ТелоЗапроса.Закрыть();
	
	Возврат ПоляЗапроса;
	
КонецФункции 

Функция ПолучитьРазделитьПолейСоставногоСодержимого(Запрос)
	
	ПолныйТипСодержимого = Запрос.Заголовки["Content-Type"];
	
	Поз = СтрНайти(ПолныйТипСодержимого, ";");
	ТипСодержимого = НРег(?(Поз > 0, Лев(ПолныйТипСодержимого, Поз - 1), ПолныйТипСодержимого));
	
	Если ТипСодержимого <> "multipart/form-data" Тогда
		ВызватьИсключение НСтр("ru='Значение запроса не является составным содержимым или неверно указан заголовок Content-Type'");
	КонецЕсли; 
	
	Поз = СтрНайти(ПолныйТипСодержимого, "boundary", , Поз + 1);
	Если Поз = 0 Тогда
		ВызватьИсключение НСтр("ru='Не указан разделитель (boundary) составного содержимого в заголовке Content-Type'");
	КонецЕсли; 
	
	Поз = СтрНайти(ПолныйТипСодержимого, "=", , Поз);
	Если Поз = 0 Тогда
		ВызватьИсключение НСтр("ru='Не указано значение разделителя (boundary) составного содержимого в заголовке Content-Type'");
	КонецЕсли; 
	
	ПозНачалаРазделителя = Поз + 1;
	ПозОкончанияРазделителя = СтрНайти(ПолныйТипСодержимого, ";", , ПозНачалаРазделителя);
	
	Если ПозОкончанияРазделителя = 0 Тогда
		РазделительПолей = СокрЛП(Сред(ПолныйТипСодержимого, ПозНачалаРазделителя));
	Иначе
		КоличествоСимволов = ПозОкончанияРазделителя - ПозНачалаРазделителя;
		РазделительПолей = СокрЛП(Сред(ПолныйТипСодержимого, ПозНачалаРазделителя, КоличествоСимволов));
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(РазделительПолей) Тогда
		ВызватьИсключение НСтр("ru='Не указан разделитель (boundary) составного содержимого в заголовке Content-Type'");
	КонецЕсли; 
	
	Возврат "--" + РазделительПолей;
	
КонецФункции 

Функция ПрочитатьПолеСоставногоСодержимогоИзПотока(Поток)
	
	Поле = ПолеСоставногоСодержимогоЗапроса();
	
	ЧтениеДанных = Новый ЧтениеДанных(Поток);
	
	ЭтоСодержимое = Ложь;
	Пока Не ЭтоСодержимое Цикл
		Строка = ЧтениеДанных.ПрочитатьСтроку();
		
		Если ЗначениеЗаполнено(Строка) Тогда
			ОбработатьЗаголовокСоставногоСодержимого(Поле, Строка);
		Иначе
			// Пустая строка является разделителем заголовков и содержимого поля.
			ЭтоСодержимое = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	РезультатЧтения = ЧтениеДанных.Прочитать();
	
	Если РезультатЧтения.Размер > 0 Тогда
		
		ПотокСодержимого = РезультатЧтения.ОткрытьПотокДляЧтения();
		ЧтениеДанныхСодержимого = Новый ЧтениеДанных(ПотокСодержимого);
		
		ДвоичноеСодержимое = (Поле.ИмяФайла <> Неопределено);
		Если ДвоичноеСодержимое Тогда
			РазмерСодержимого = РезультатЧтения.Размер - 2; // Конечный разделитель строк (ВК + ПС) не нужен.
			РезультатЧтенияСодержимого = ЧтениеДанныхСодержимого.Прочитать(РазмерСодержимого);
			
			Поле.Содержимое = РезультатЧтенияСодержимого.ПолучитьДвоичныеДанные();
		Иначе
			Поле.Содержимое = ЧтениеДанныхСодержимого.ПрочитатьСимволы();
			
			// Конечный разделитель строк (ПС) не нужен (согласно RFC7578 разделителем строк является ВК + ПС, но 1С
			// конвертирует в ПС при чтении строк).
			Поле.Содержимое = Лев(Поле.Содержимое, СтрДлина(Поле.Содержимое) - 1);
		КонецЕсли; 
		
		ЧтениеДанныхСодержимого.Закрыть();
		ПотокСодержимого.Закрыть();
		
	КонецЕсли; 
	
	ЧтениеДанных.Закрыть();
	
	Возврат Поле;
	
КонецФункции 

Функция ПолеСоставногоСодержимогоЗапроса()
	
	Возврат Новый Структура("Имя, ИмяФайла, ТипСодержимого, Содержимое");
	
КонецФункции

Процедура ОбработатьЗаголовокСоставногоСодержимого(Поле, ПолныйЗаголовок)
	
	Поз = СтрНайти(ПолныйЗаголовок, ":");
	Заголовок = НРег(Лев(ПолныйЗаголовок, Поз - 1));
	
	Если Заголовок = "content-disposition" Тогда
		
		Поз = СтрНайти(ПолныйЗаголовок, ";");
		СвойстваЗаголовка = СокрЛ(Сред(ПолныйЗаголовок, Поз + 1));
		
		МассивСвойств = СтрРазделить(СвойстваЗаголовка, ";");
		Для каждого Свойство Из МассивСвойств Цикл
			
			КлючЗначение = СтрРазделить(СокрЛП(Свойство), "=");
			Ключ = НРег(СокрЛП(КлючЗначение[0]));
			Значение = УдалитьОбрамляющиеКавычкиИзСтроки(СокрЛП(КлючЗначение[1]));
			
			Если Ключ = "name" Тогда
				Поле.Имя = Значение;
			ИначеЕсли Ключ = "filename" Тогда
				Поле.ИмяФайла = Значение;
			КонецЕсли; 
			
		КонецЦикла;
		
	ИначеЕсли Заголовок = "content-type" Тогда
		
		Поле.ТипСодержимого = СокрЛ(Сред(ПолныйЗаголовок, Поз + 1));
		
	КонецЕсли; 
	
КонецПроцедуры 

Функция УдалитьОбрамляющиеКавычкиИзСтроки(Строка)
	
	ПервыйСимвол = Лев(Строка, 1);
	ПоследнийСимвол = Прав(Строка, 1);
	
	СтрокаВКавычках = (ПервыйСимвол = """" И ПоследнийСимвол = """");
	
	Возврат ?(СтрокаВКавычках,
	Сред(Строка, 2, СтрДлина(Строка) - 2),
	Строка);
	
КонецФункции 

#КонецОбласти

#Область ПолучениеДанных

Функция ПолучитьРасписаниеВрача(Параметры) Экспорт 
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь; 
	
	ЗапросСотрудникиПользователя = Новый Запрос;
	ЗапросСотрудникиПользователя.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиПользователя.Сотрудник КАК Сотрудник,
	|	СотрудникиПользователя.СотрудникПоУмолчанию КАК СотрудникПоУмолчанию
	|ИЗ
	|	РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
	|ГДЕ
	|	СотрудникиПользователя.Пользователь = &Пользователь
	|	И СотрудникиПользователя.Сотрудник.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникПоУмолчанию УБЫВ,
	|	Сотрудник";
	ЗапросСотрудникиПользователя.УстановитьПараметр("Пользователь", ТекущийПользователь);
	РезультатСотрудники = ЗапросСотрудникиПользователя.Выполнить().Выгрузить();
	
	
	Если  Параметры.guiEmployee = "all" Тогда             
		
		Сотрудник = Справочники.Сотрудники.ПустаяСсылка();	
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.guiEmployee) Тогда  
		
		Сотрудник = Справочники.Сотрудники.ПолучитьСсылку(Новый УникальныйИдентификатор(Параметры.guiEmployee)); 
		
	Иначе
		
		СтрокаСотрудник = РезультатСотрудники.Найти(Истина, "СотрудникПоУмолчанию");
		
		Если СтрокаСотрудник = Неопределено Тогда 
			Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
		Иначе
			Сотрудник = СтрокаСотрудник.Сотрудник;
		КонецЕсли;
		
	КонецЕсли; 
	
	ДатаПриема = ПреобразоватьСтрокуВДату(Параметры.date);
	
	РабочиеМеста = Обработки.СменноеЗадание.ПолучитьРабочиеМеста();
	
	СменныеЗадания = Обработки.СменноеЗадание.ПолучитьСменныеЗадания(
	РабочиеМеста, Справочники.МедицинскиеКабинеты.ПустаяСсылка(), Справочники.Сотрудники.ПустаяСсылка(),
	НачалоДня(ДатаПриема), КонецДня(ДатаПриема)
	);  
	
	
	СтруктураОтвета = Новый Структура("schedule, employees, currentEmployee");
	МассивРасписание = Новый Массив;
	
	сч = 0;            
	
	Заказы = СменныеЗадания.ВыгрузитьКолонку("Заказ");
	Запрос = Новый Запрос;   
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказПациентаМедицинскиеУслуги.УникальныйИдентификаторУслугиСсылка КАК УникальныйИдентификаторУслугиСсылка,
	|	ЗаказПациентаМедицинскиеУслуги.УникальныйИдентификаторУслуги КАК УникальныйИдентификаторУслуги
	|ИЗ
	|	Документ.ЗаказПациента.МедицинскиеУслуги КАК ЗаказПациентаМедицинскиеУслуги
	|ГДЕ
	|	ЗаказПациентаМедицинскиеУслуги.Ссылка В(&Заказы)";
	
	ЗАпрос.УстановитьПараметр("Заказы", Заказы);
	тзЗАказы = Запрос.Выполнить().Выгрузить();
	
	
	УникальныеИдентификаторыУслуги = СменныеЗадания.ВыгрузитьКолонку("УникальныйИдентификаторУслуги");
	
	ЗначенияДополнительныхПараметров = ПолучитьЗначениеДополнительныхПараметровУслуг(УникальныеИдентификаторыУслуги, Ложь);
	ОплаченныеУслуги = ПолучитьОплаченныеУслуги(УникальныеИдентификаторыУслуги);
	
	Для Каждого СтрокаДанные из СменныеЗадания Цикл                            
		
		Если ЗначениеЗаполнено(Сотрудник) 
			И СтрокаДанные.Исполнитель <> Сотрудник  Тогда
			Продолжить;     
		КонецЕсли;                 
		
		сч = сч + 1;
		
		СтруктураСтрокаРасписания = Новый Структура;
		СтруктураСтрокаРасписания.Вставить("timeOfReceipt", Формат(СтрокаДанные.ЗапланированноеВремя, "ДФ=HH:mm"));
		СтруктураСтрокаРасписания.Вставить("duration", СтрокаДанные.ДлительностьУслуги / 60); 
		СтруктураСтрокаРасписания.Вставить("patient", Строка(СтрокаДанные.Пациент)); 
		СтруктураСтрокаРасписания.Вставить("dateOfBirth", Формат(СтрокаДанные.ДатаРождения, "ДФ=dd.MM.yyyy"));
		СтруктураСтрокаРасписания.Вставить("patient", СформироватьСтруктуруОбязательныхРеквизитовСправочника(СтрокаДанные.Пациент));
		СтруктураСтрокаРасписания.Вставить("presentationPatient", Строка(СтрокаДанные.ПредставлениеПациента));
		СтруктураСтрокаРасписания.Вставить("yearsOld", ОбщиеМеханизмыКлиентСервер.ВозрастСтрокой(СтрокаДанные.ДатаРождения));
		СтруктураСтрокаРасписания.Вставить("visitRegistered", СтрокаДанные.ВизитЗарегистрирован);
		СтруктураСтрокаРасписания.Вставить("serviceCompleted", СтрокаДанные.СтатусУслуги = Перечисления.СтатусыУслуг.Выполнена);   
		
		ДополнительныеПараметры = Новый Структура;
		СтруктураСтрокаРасписания.Вставить("additionalServiceParameters", ДополнительныеПараметры);   
		ЗначенияДополнительныхПараметровСтроки =  ЗначенияДополнительныхПараметров.Получить(СтрокаДанные.УникальныйИдентификаторУслуги);
		Если ЗначенияДополнительныхПараметровСтроки <> Неопределено Тогда
			Для Каждого Элемент ИЗ ЗначенияДополнительныхПараметровСтроки Цикл    
				ДополнительныеПараметры.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
		КонецЕсли;
		
		строкаУслуги =  тзЗАказы.Найти(СтрокаДанные.УникальныйИдентификаторУслуги, "УникальныйИдентификаторУслуги");
		guidService = "";
		УникальныйИдентификаторУслугиСсылка = Неопределено;
		Если строкаУслуги <> Неопределено Тогда
			guidService = Строка(строкаУслуги.УникальныйИдентификаторУслуги);
			УникальныйИдентификаторУслугиСсылка = строкаУслуги.УникальныйИдентификаторУслугиСсылка;
		КонецЕсли;           
		СтруктураСтрокаРасписания.Вставить("service", Новый Структура("guidService, service", guidService, СформироватьСтруктуруОбязательныхРеквизитовСправочника(УникальныйИдентификаторУслугиСсылка)));
		
		СтруктураСтрокаРасписания.Вставить("patient", СформироватьСтруктуруОбязательныхРеквизитовСправочника(СтрокаДанные.Пациент));      
		СтруктураСтрокаРасписания.Вставить("employee", СформироватьСтруктуруОбязательныхРеквизитовСправочника(СтрокаДанные.Исполнитель));
		СтруктураСтрокаРасписания.Вставить("nomenclature", СформироватьСтруктуруОбязательныхРеквизитовСправочника(СтрокаДанные.Номенклатура));
		СтруктураСтрокаРасписания.Вставить("presentationService", Строка(СтрокаДанные.ПредставлениеУслуги)); 
		СтруктураСтрокаРасписания.Вставить("medicalCard", СформироватьСтруктуруОбязательныхРеквизитовСправочника(СтрокаДанные.МедицинскаяКарта));
		СтруктураСтрокаРасписания.Вставить("servicePaid", ?(ОплаченныеУслуги.Получить(СтрокаДанные.УникальныйИдентификаторУслуги)=Истина, Истина, Ложь));  
		СтруктураСтрокаРасписания.Вставить("guidService", Строка(СтрокаДанные.УникальныйИдентификаторУслуги));
	
		
		СтруктураСтрокаРасписания.Вставить("order", сч);  
		
		backgroundColor = "";  
		color = "";
		Если  ДополнительныеПараметры.Свойство("ОбследованиеЗавершено") И ДополнительныеПараметры.ОбследованиеЗавершено Тогда
			backgroundColor = "#a2cf6e";
			color = "white";
		ИначеЕсли  СтруктураСтрокаРасписания.servicePaid Тогда
			backgroundColor = "#dd33fa";
			color = "white";
		ИначеЕсли ДополнительныеПараметры.Свойство("НачатаДиагностика") И ДополнительныеПараметры.НачатаДиагностика Тогда
			backgroundColor = "#ffee33";   
		КонецЕсли;
		СтруктураСтрокаРасписания.Вставить("backgroundColor", backgroundColor);  
		СтруктураСтрокаРасписания.Вставить("color", color);  
		
		СтруктураСтрокаРасписания.Вставить("order", сч);  
						
		Комментарий = "";
		Если не ЗначениеЗаполнено(СтрокаДанные.МедицинскаяКарта) Тогда
			ДанныеКомментарий = МеханизмыКомментариев.ПолучитьКомментарий(УникальныйИдентификаторУслугиСсылка, ТекущаяДатаСеанса(), Перечисления.ТипыКомментариев.МедицинскаяУслуга);
			Если ТипЗнч(ДанныеКомментарий) = Тип("Структура") Тогда       
				Комментарий = ДанныеКомментарий.Комментарий;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураСтрокаРасписания.Вставить("comment",  Комментарий);
		
		МассивРасписание.Добавить(СтруктураСтрокаРасписания);
		
	КонецЦикла;
	
	МассивСотрудники = Новый Массив; 
	Для Каждого СтрокаДанные из РезультатСотрудники Цикл 
		МассивСотрудники.Добавить(СформироватьСтруктуруОбязательныхРеквизитовСправочника(СтрокаДанные.Сотрудник));
	КонецЦикла;
	
	СтруктураОтвета.schedule = МассивРасписание;
	СтруктураОтвета.employees = МассивСотрудники;  
	СтруктураОтвета.currentEmployee = СформироватьСтруктуруОбязательныхРеквизитовСправочника(Сотрудник);
	
	Возврат СтруктураОтвета;
	
	
КонецФункции

Функция ПолучитьВсеУслугиПоПациенту(Параметры) Экспорт 
	
	guidPatient = Параметры.guidPatient;
	
	Пациент = Справочники.Картотека.ПолучитьСсылку(Новый УникальныйИдентификатор(guidPatient));
	
	СтруктураЗапроса = Новый Структура("ФИО, Возраст, Контакты");
	СтруктураОтвета = Регистратура.ПолучитьДанныеПациента(Пациент, , СтруктураЗапроса);
	
	Характеристики = Новый Массив;                                        	
	//ДобавитьХарактеристику(Характеристики, "ФИО", СтруктураОтвета.ФИО.ПредставлениеПолное);
	ДобавитьХарактеристику(Характеристики, "Возраст", СтруктураОтвета.ФИО.Возраст);
	ДобавитьХарактеристику(Характеристики, "Дата рождения", Формат(СтруктураОтвета.ФИО.ДатаРождения,"ДФ=dd.MM.yyyy")); 
	
	СтрокаТелефона = СтруктураОтвета.Контакты.Найти(Справочники.ВидыКонтактнойИнформации.МобТелефонПациента,  "Вид");	
	Если СтрокаТелефона <>  Неопределено Тогда
		ДобавитьХарактеристику(Характеристики, "Мобильный телефон", СтрокаТелефона.НомерТелефона, "tel"); 
	КонецЕсли;
	
	МедКарты = ПолучитьСписокКарт(Пациент);
	Если МедКарты.Количество() Тогда		
		СтрокаМедКарты = МедКарты[МедКарты.Количество()-1];				
		ДобавитьХарактеристику(Характеристики, "Медицинская карта", СтрокаМедКарты.Представление); 		
		КомментарийКарты  = МеханизмыКомментариев.ПолучитьКомментарий(СтрокаМедКарты.МедицинскаяКарта, ТекущаяДатаСеанса(), Перечисления.ТипыКомментариев.КМедицинскойКарте);
		Если ТипЗнч(КомментарийКарты) = Тип("Структура") Тогда                               
			ДобавитьХарактеристику(Характеристики, "Комментарий мед. карты", КомментарийКарты.Комментарий); 
		КонецЕсли;
	КонецЕсли; 
	
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                     |	lvlapp_Фотоснимки.УслугаПациента КАК УслугаПациента,
	                     |	lvlapp_Фотоснимки.УникальныйИдентификаторУслуги КАК УникальныйИдентификаторУслуги,
	                     |	ИСТИНА КАК ЕстьФото
	                     |ПОМЕСТИТЬ ВТ_НаличиеФото
	                     |ИЗ
	                     |	РегистрСведений.lvlapp_Фотоснимки КАК lvlapp_Фотоснимки
	                     |ГДЕ
	                     |	lvlapp_Фотоснимки.Картотека = &Пациент
	                     |	И НЕ lvlapp_Фотоснимки.ПометкаУдаления
	                     |;
	                     |
	                     |////////////////////////////////////////////////////////////////////////////////
	                     |ВЫБРАТЬ
	                     |	ВЫБОР
	                     |		КОГДА СтатусыУслуг.ДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1)
	                     |			ТОГДА СтатусыУслуг.ДатаВыполнения
	                     |		КОГДА СтатусыУслуг.ЗапланированноеВремя <> ДАТАВРЕМЯ(1, 1, 1)
	                     |			ТОГДА СтатусыУслуг.ЗапланированноеВремя
	                     |		ИНАЧЕ СтатусыУслуг.ДатаЗаказа
	                     |	КОНЕЦ КАК Дата,
	                     |	СтатусыУслуг.Номенклатура КАК Номенклатура,
	                     |	СменныеЗадания.ОсновнойИсполнитель КАК ОсновнойИсполнитель,
	                     |	СменныеЗадания.ДокументВыполнения КАК ДокументВыполнения,
	                     |	ВЫБОР
	                     |		КОГДА СтатусыУслуг.ДатаВыполнения = ДАТАВРЕМЯ(1, 1, 1)
	                     |			ТОГДА СправочникМедицинскиеРабочиеМестаИсполнители.Сотрудник
	                     |		ИНАЧЕ СменныеЗадания.ОсновнойИсполнитель
	                     |	КОНЕЦ КАК Исполнитель,
	                     |	Комментарии.Комментарий КАК Комментарий,
	                     |	СтатусыУслуг.СтатусУслуги КАК СтатусУслуги,
	                     |	СтатусыУслуг.МедицинскаяКарта КАК МедицинскаяКарта,
	                     |	СтатусыУслуг.УникальныйИдентификаторУслуги КАК УникальныйИдентификаторУслуги,
	                     |	СтатусыУслуг.УникальныйИдентификаторУслугиСсылка КАК УникальныйИдентификаторУслугиСсылка,
	                     |	СтатусыУслуг.МедицинскийДокумент КАК МедицинскийДокумент,
	                     |	ЕСТЬNULL(ВТ_НаличиеФото.ЕстьФото, ЛОЖЬ) КАК ЕстьФото,
	                     |	СтатусыУслуг.ЗапланированноеВремя КАК ЗапланированноеВремя
	                     |ИЗ
	                     |	РегистрСведений.СтатусыУслуг КАК СтатусыУслуг
	                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СменныеЗадания КАК СменныеЗадания
	                     |		ПО СтатусыУслуг.УникальныйИдентификаторУслуги = СменныеЗадания.УникальныйИдентификаторУслуги
	                     |			И (СменныеЗадания.КлючСтрокиСоставаУслуги = 1)
	                     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МедицинскиеРабочиеМеста КАК СправочникМедицинскиеРабочиеМеста
	                     |		ПО (СменныеЗадания.МедицинскоеРабочееМесто = СправочникМедицинскиеРабочиеМеста.Ссылка)
	                     |			И (СтатусыУслуг.ДатаВыполнения = ДАТАВРЕМЯ(1, 1, 1))
	                     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МедицинскиеРабочиеМеста.Исполнители КАК СправочникМедицинскиеРабочиеМестаИсполнители
	                     |		ПО (СправочникМедицинскиеРабочиеМеста.Ссылка = СправочникМедицинскиеРабочиеМестаИсполнители.Ссылка)
	                     |			И (СправочникМедицинскиеРабочиеМестаИсполнители.ОтветственныйЗаНазначение = ИСТИНА)
	                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Комментарии.СрезПоследних(, ) КАК Комментарии
	                     |		ПО СтатусыУслуг.УникальныйИдентификаторУслуги = Комментарии.УидОбъекта
	                     |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НаличиеФото КАК ВТ_НаличиеФото
	                     |		ПО СтатусыУслуг.УникальныйИдентификаторУслугиСсылка = ВТ_НаличиеФото.УслугаПациента
	                     |			И СтатусыУслуг.УникальныйИдентификаторУслуги = ВТ_НаличиеФото.УникальныйИдентификаторУслуги
	                     |ГДЕ
	                     |	СтатусыУслуг.Пациент = &Пациент
	                     |
	                     |УПОРЯДОЧИТЬ ПО
	                     |	Дата УБЫВ";
	ЗапросУслуги.УстановитьПараметр("Пациент", Пациент); 
	
	РезультатУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	
	МассивУслуги = Новый Массив;    
	
	УникальныеИдентификаторыУслуги = РезультатУслуги.ВыгрузитьКолонку("УникальныйИдентификаторУслуги");
	
	ЗначенияДополнительныхПараметров = ПолучитьЗначениеДополнительныхПараметровУслуг(УникальныеИдентификаторыУслуги);
	ОплаченныеУслуги = ПолучитьОплаченныеУслуги(УникальныеИдентификаторыУслуги);
    Комментарии = ПолучитьКомментарии(УникальныеИдентификаторыУслуги);

	Для Каждого СтрокаДанные из РезультатУслуги Цикл 
		
		СтруктураУслуга = Новый Структура;
		СтруктураУслуга.Вставить("date", СтрокаДанные.Дата);
		СтруктураУслуга.Вставить("presentationDate", Формат(СтрокаДанные.Дата, "ДФ='dd.MM.yyyy HH:mm'"));   
		СтруктураУслуга.Вставить("timeOfReceipt", Формат(СтрокаДанные.ЗапланированноеВремя, "ДФ=HH:mm"));
		СтруктураУслуга.Вставить("nomenclature", СформироватьСтруктуруОбязательныхРеквизитовСправочника(СтрокаДанные.Номенклатура));
		СтруктураУслуга.Вставить("employee", СформироватьСтруктуруОбязательныхРеквизитовСправочника(СтрокаДанные.Исполнитель)); 
		СтруктураУслуга.Вставить("comment", Строка(СтрокаДанные.Комментарий));
		СтруктураУслуга.Вставить("status", Строка(СтрокаДанные.СтатусУслуги));
		СтруктураУслуга.Вставить("medicalCard", СформироватьСтруктуруОбязательныхРеквизитовСправочника(СтрокаДанные.МедицинскаяКарта));
		СтруктураУслуга.Вставить("guidService", Строка(СтрокаДанные.УникальныйИдентификаторУслуги));
		СтруктураУслуга.Вставить("service", СформироватьСтруктуруОбязательныхРеквизитовСправочника(СтрокаДанные.УникальныйИдентификаторУслугиСсылка));
		СтруктураУслуга.Вставить("medicalDocument", СформироватьСтруктуруОбязательныхРеквизитовДокумента(СтрокаДанные.МедицинскийДокумент)); 
		СтруктураУслуга.Вставить("thereArePhotos", СтрокаДанные.ЕстьФото); 
		СтруктураУслуга.Вставить("servicePaid", ?(ОплаченныеУслуги.Получить(СтрокаДанные.УникальныйИдентификаторУслуги)=Истина, Истина, Ложь));
		
		КомментарийПоУслуге = Комментарии.Получить(СтрокаДанные.УникальныйИдентификаторУслуги);
        СтруктураУслуга.Вставить("historyComments", ?(КомментарийПоУслуге=Неопределено, Новый Массив, КомментарийПоУслуге));
		                    
		ЗначенияДополнительныхПараметровСтроки =  ЗначенияДополнительныхПараметров.Получить(СтрокаДанные.УникальныйИдентификаторУслуги);
		Если ЗначенияДополнительныхПараметровСтроки <> Неопределено Тогда
			СтруктураУслуга.Вставить("additionalServiceParameters", ЗначенияДополнительныхПараметровСтроки); 
		Иначе
			СтруктураУслуга.Вставить("additionalServiceParameters", Новый Массив); 
		КонецЕсли;
 
		
		МассивУслуги.Добавить(СтруктураУслуга);
		
	КонецЦикла;
	
	Возврат Новый Структура("services, patientParameters", МассивУслуги, Характеристики);
	
КонецФункции

Процедура ДобавитьХарактеристику(Характеристики, Имя, Значение, Тип="")
	
	Характеристики.Добавить(Новый Структура("name, value, type", Имя, Значение, тип));
	
КонецПроцедуры

Функция ПолучитьСписокКарт(ВыбПациент) 
	Перем  ЭтоЗакрыта;
	Ограничения = Регистратура.ПолучитьОграниченияПользователя_ТипСтатусКарты(ПараметрыСеанса.ТекущийПользователь);
	
	Запрос = Новый Запрос;
	
	стрЗапроса = 
	"ВЫБРАТЬ
	|	2 КАК ТипДокумента,
	|	МедицинскиеКарты.Ссылка КАК МедицинскаяКарта,
	|	МедицинскиеКарты.ТипМедицинскойКарты КАК ТипКарты,
	|	МедицинскиеКарты.ДокументКарты.Дата КАК Дата,
	|	НомераОбъектов.Префикс КАК НомерКартыПрефикс,
	|	НомераОбъектов.Номер КАК НомерКартыНомер,
	|	НомераОбъектов.Суффикс КАК НомерКартыСуффикс,
	|	МедицинскиеКарты.НомерКартыПредставление,
	|	НомераОбъектов.Нумератор,
	|	ВЫБОР
	|		КОГДА МедицинскиеКарты.ДокументЗакрытия = НЕОПРЕДЕЛЕНО
	|				ИЛИ МедицинскиеКарты.ДокументЗакрытия ЕСТЬ NULL
	|				ИЛИ МедицинскиеКарты.ДатаЗакрытия > &НачалоТекущейДаты
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КартаДействующая,
	|	МедицинскиеКарты.Пациент КАК Пациент
	|ИЗ
	|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НомераОбъектов КАК НомераОбъектов
	|		ПО МедицинскиеКарты.Ссылка = НомераОбъектов.Объект
	|			И МедицинскиеКарты.ТипМедицинскойКарты = НомераОбъектов.КлючШаблонаНомера
	|ГДЕ
	|	(&ЗакрытыеРазрешены
	|			ИЛИ МедицинскиеКарты.ДокументЗакрытия ЕСТЬ NULL
	|			ИЛИ МедицинскиеКарты.ДокументЗакрытия = НЕОПРЕДЕЛЕНО
	|			ИЛИ МедицинскиеКарты.ДатаЗакрытия > &НачалоТекущейДаты)
	|	И &Фильтр3
	|	И &Фильтр2
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипКарты,
	|	Дата";
	
	Фильтр2 = "";
	Фильтр3 = "";
	Фильтр3 = Фильтр3 + " И МедицинскиеКарты.Пациент = &Пациент";
	Запрос.УстановитьПараметр("Пациент", ВыбПациент);
	
	Фильтр2 = Фильтр2 + " ТипМедицинскойКарты в (&ТипКарты)";
	Запрос.УстановитьПараметр("ТипКарты", Ограничения.ТипКартыРазрешено);
	
	Запрос.УстановитьПараметр("ЗакрытыеРазрешены",Ограничения.СтатусКартыЗакрыта);
	// ограничим поиск направлений 2 месяцами?
	Запрос.УстановитьПараметр("ДатаПоиска", ДобавитьМесяц(ТекущаяДатаСеанса(), -10) );
	Запрос.УстановитьПараметр("НачалоТекущейДаты",НачалоДня(ТекущаяДатаСеанса()));
	
	Запрос.Текст = СтрЗаменить(стрЗапроса, "&Фильтр2", Фильтр2);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Фильтр3", Фильтр3);
	
	РезЗапроса = Запрос.Выполнить();
	
	Рез = РезЗапроса.Выгрузить();
	Рез.Колонки.Добавить("Представление");
	Рез.Колонки.Добавить("Номер");
	Для Каждого стр из Рез Цикл
		Если стр.ТипДокумента = 1 Тогда
			стр.Номер= стр.НомерКартыПрефикс;
		Иначе
			стр.Номер = стр.НомерКартыПредставление;
		КонецЕсли;
		Осн = СокрЛП(стр.Номер)+ " от " + Формат(стр.Дата,"ДФ=dd.MM.yy") + ", " + стр.ТипКарты;	
		ЭтоЗакрытая = НЕ Стр.КартаДействующая;
		стр.Представление =  ?(стр.ТипДокумента = 1, "Направление, ", "")
		+ Осн + ?(стр.ТипДокумента = 2 И ЭтоЗакрытая, ", " + Регистратура.СтатусКартыСтрокой(Стр.МедицинскаяКарта,НачалоДня(ТекущаяДатаСеанса())), "")
		;
	КонецЦикла;
	Рез.Колонки.Удалить("НомерКартыПрефикс");
	Рез.Колонки.Удалить("НомерКартыНомер");
	Рез.Колонки.Удалить("НомерКартыСуффикс");
	Рез.Колонки.Удалить("Нумератор");
	
	Возврат Рез;
КонецФункции

Функция ПолучитьHTML(Параметры) Экспорт
	
	Ответ = "";         
	
	Результат = Новый Структура("html, title");     
	ТабДок = Новый ТабличныйДокумент;
	
	Если Параметры.typeHTML =  "emk" Тогда
		
		СправочникМедКарта = Справочники.МедицинскиеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(Параметры.guidMedicalCard));
		ТабДок = СформироватьПредставлениеВыпискиНаСервере(СправочникМедКарта);
		Результат.title = "ЭМК";  
		
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML5);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяФайла);
		Результат.html = ТекстовыйДокумент.ПолучитьТекст();
		
	ИначеЕсли Параметры.typeHTML =  "emd" Тогда
		
		Результат.title = "Электронный медицинский документ";
		Результат.html = СформироватьЭлектронныйМедицинскийДокумент(Параметры.guidMedicalDocument);
		
		
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПревьюФото(Параметры) Экспорт
	
	СтруктураПараметров = Новый Структура("guidServiceRef, guidService, guidPatient, Ссылка");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Параметры);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	lvlapp_Фотоснимки.Картотека КАК Картотека,
	|	lvlapp_Фотоснимки.УслугаПациента КАК УслугаПациента,
	|	lvlapp_Фотоснимки.УникальныйИдентификаторУслуги КАК УникальныйИдентификаторУслуги,
	|	lvlapp_Фотоснимки.Фото КАК Фото,
	|	lvlapp_Фотоснимки.Превью КАК Превью,
	|	lvlapp_Фотоснимки.Фото.ВерсияДанных КАК ФотоВерсияДанных,
	|	lvlapp_Фотоснимки.ВключенВГалереюДоПосле КАК ВключенВГалереюДоПосле,
	|	lvlapp_Фотоснимки.PixelXDimension КАК PixelXDimension,
	|	lvlapp_Фотоснимки.PixelYDimension КАК PixelYDimension,
	|	lvlapp_Фотоснимки.DateTimeDigitized КАК DateTimeDigitized,
	|	lvlapp_Фотоснимки.Фото.ДатаСоздания КАК ДатаСоздания,
	|	lvlapp_Фотоснимки.Фото.Размер КАК Размер,
	|	lvlapp_Фотоснимки.Фото.Расширение КАК Расширение,
	|	lvlapp_Фотоснимки.Фото.Наименование КАК НаименованиеФото,
	|	lvlapp_Фотоснимки.Фото.ДатаСоздания КАК ФотоДатаСоздания
	|ИЗ
	|	РегистрСведений.lvlapp_Фотоснимки КАК lvlapp_Фотоснимки
	|ГДЕ
	|	НЕ lvlapp_Фотоснимки.ПометкаУдаления";              
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Ссылка) Тогда
		Запрос.Текст = Запрос.Текст + "
		| 
		|И lvlapp_Фотоснимки.Фото = &Ссылка";
		Запрос.УстановитьПараметр("УникальныйИдентификаторУслуги", СтруктураПараметров.Ссылка);
	КонецЕсли;
	
	Если Параметры.Свойство("favorites") Тогда
		Запрос.Текст = Запрос.Текст + "
		| 
		|И lvlapp_Фотоснимки.ВключенВГалереюДоПосле";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.guidPatient) Тогда
		Запрос.Текст = Запрос.Текст + "
		| 
		|И lvlapp_Фотоснимки.Картотека = &МедКарта";
		МедКарта = Справочники.Картотека.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметров.guidPatient));   
		Запрос.УстановитьПараметр("МедКарта", МедКарта);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.guidService) Тогда
		Запрос.Текст = Запрос.Текст + "
		| 
		|И lvlapp_Фотоснимки.УникальныйИдентификаторУслуги = &УникальныйИдентификаторУслуги";
		
		Запрос.УстановитьПараметр("УникальныйИдентификаторУслуги", Новый УникальныйИдентификатор(СтруктураПараметров.guidService));
	КонецЕсли; 
	
	Если Параметры.Свойство("favorites") Тогда
		Запрос.Текст = Запрос.Текст + " 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания"; 
	Иначе
		Запрос.Текст = Запрос.Текст + " 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания УБЫВ"; 
	КонецЕсли;   
	
	Результат = Запрос.Выполнить().Выгрузить();   
	
	МассивФото = Новый Массив;
	
	Для Каждого СтрокаДанные из Результат Цикл                          
		
		СтруктураФото = Новый Структура;  
		СтруктураФото.Вставить("select", false);  
		СтруктураФото.Вставить("version", СтрокаДанные.ФотоВерсияДанных); 
		СтруктураФото.Вставить("local", Ложь);
		СтруктураФото.Вставить("localPath", "");	
		СтруктураФото.Вставить("guidService", СокрЛП(Строка(СтрокаДанные.УникальныйИдентификаторУслуги))); 
		СтруктураФото.Вставить("guidServiceRef", Строка(СтрокаДанные.УслугаПациента.УникальныйИдентификатор())); 	
		СтруктураФото.Вставить("guidPreview", Строка(СтрокаДанные.Превью.УникальныйИдентификатор())); 
		СтруктураФото.Вставить("guidFullPhoto", Строка(СтрокаДанные.Фото.УникальныйИдентификатор()));  
		СтруктураФото.Вставить("guidPatient", Строка(СтрокаДанные.Картотека.УникальныйИдентификатор())); 
		СтруктураФото.Вставить("IncludedInFavoriteGallery", СтрокаДанные.ВключенВГалереюДоПосле);  
		СтруктураФото.Вставить("metadata", ПолучитьМетаданныеФото(СтрокаДанные));  
		
		МассивФото.Добавить(СтруктураФото);
		
	КонецЦикла;
	
	Возврат МассивФото;
	
КонецФункции

Функция ПолучитьФото(Параметры) Экспорт 
	
	guid = Параметры.Получить("guid");
	
	ХранилищеИнформации = Справочники.КартотекаПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(guid));
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ХранилищеИнформации);
	
	Ответ = Новый HTTPСервисОтвет(200);  
	Поток =  Ответ.ПолучитьТелоКакПоток();
	Ответ.Заголовки.Вставить("Content-Type", "image/jpeg");
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
	// читаем до конца файла / целиком
	РезультатЧтения = ЧтениеДанных.Прочитать();
	Ответ.Заголовки.Вставить("Content-Length", РезультатЧтения.Размер);
	Запись = Новый ЗаписьДанных(Поток);
	// Вариант синтаксиса: Запись результата чтения данных
	Запись.Записать(РезультатЧтения);
	ЧтениеДанных.Закрыть();
	Запись.Закрыть();
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьДанныеПоУслуге(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Комментарии.Комментарий КАК Комментарий,
	|	Комментарии.СсылкаНаОбъект КАК СсылкаНаОбъект,
	|	Комментарии.Период КАК Период,
	|	ЕСТЬNULL(Комментарии.Пользователь.Наименование, """") КАК Автор,
	|	Комментарии.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.УидОбъекта = &ИдентификаторУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ"; 
	Запрос.УстановитьПараметр("ИдентификаторУслуги", Новый УникальныйИдентификатор(Параметры.guidService));
	ТаблицаКомментарии = Запрос.Выполнить().Выгрузить();
	
	ПоследнийКомент = "";
	Если ТаблицаКомментарии.Количество() Тогда
		ПоследнийКомент = ТаблицаКомментарии[0].Комментарий;
	КонецЕслИ;
	
	ИсторияКомментариев = Новый Массив;
	Для Каждого СтрокаТаблицы ИЗ ТаблицаКомментарии Цикл    
		
		СтруктураКомментария = Новый Структура("date,comment, author");
		СтруктураКомментария.date = Формат(СтрокаТаблицы.Период, "ДЛФ=DT");
		СтруктураКомментария.comment = СтрокаТаблицы.Комментарий;
		СтруктураКомментария.author = СтрокаТаблицы.Автор;
		ИсторияКомментариев.Добавить(СтруктураКомментария);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Параметры.guidServiceRef) Тогда 
		Услуга = Справочники.УслугиПациентов.ПолучитьСсылку(Новый УникальныйИдентификатор(Параметры.guidServiceRef));
	Иначе
		Услуга = Справочники.УслугиПациентов.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	lvlapp_Фотоснимки.Фото КАК Фото,
	|	lvlapp_Фотоснимки.Превью КАК Превью,
	|	lvlapp_Фотоснимки.Фото.ВерсияДанных КАК ФотоВерсияДанных
	|ИЗ
	|	РегистрСведений.lvlapp_Фотоснимки КАК lvlapp_Фотоснимки
	|ГДЕ
	|	lvlapp_Фотоснимки.УникальныйИдентификаторУслуги = &УникальныйИдентификаторУслуги
	|	И НЕ lvlapp_Фотоснимки.ПометкаУдаления";
	Запрос.УстановитьПараметр("УникальныйИдентификаторУслуги", Новый УникальныйИдентификатор(Параметры.guidService));
	РезультатФото = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусыУслуг.МедицинскийДокумент КАК МедицинскийДокумент
	|ИЗ
	|	РегистрСведений.СтатусыУслуг КАК СтатусыУслуг
	|ГДЕ
	|	СтатусыУслуг.УникальныйИдентификаторУслуги = &УникальныйИдентификаторУслуги"; 
	
	Запрос.УстановитьПараметр("УникальныйИдентификаторУслуги", Новый УникальныйИдентификатор(Параметры.guidService));
	ВыборкаМедДокумент = Запрос.Выполнить().Выбрать();
	ВыборкаМедДокумент.Следующий();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("comment", ПоследнийКомент);
	СтруктураДанных.Вставить("service", СформироватьСтруктуруОбязательныхРеквизитовСправочника(Услуга));
	СтруктураДанных.Вставить("medicalDocument", СформироватьСтруктуруОбязательныхРеквизитовДокумента(ВыборкаМедДокумент.МедицинскийДокумент));
	СтруктураДанных.Вставить("historyComments", ИсторияКомментариев);
	
	МассивФото = Новый Массив;
	
	Для Каждого СтрокаДанные из РезультатФото Цикл                          
		
		СтруктураФото = Новый Структура;  
		СтруктураФото.Вставить("version", СтрокаДанные.ФотоВерсияДанных); 		
		СтруктураФото.Вставить("guidPreview", Строка(СтрокаДанные.Превью.УникальныйИдентификатор())); 
		СтруктураФото.Вставить("guidFullPhoto", Строка(СтрокаДанные.Фото.УникальныйИдентификатор())); 
		
		МассивФото.Добавить(СтруктураФото);
		
	КонецЦикла;  
	
	СтруктураДанных.Вставить("arrayPhoto", МассивФото); 
	Возврат СтруктураДанных;
	
КонецФункции   

Функция ПолучитьКомментарии(УникальныеИдентификаторыУслуги)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Комментарии.Комментарий КАК Комментарий,
	|	Комментарии.СсылкаНаОбъект КАК СсылкаНаОбъект,
	|	Комментарии.Период КАК Период,
	|	ЕСТЬNULL(Комментарии.Пользователь.Наименование, """") КАК Автор,
	|	Комментарии.Пользователь КАК Пользователь,
	|	Комментарии.УидОбъекта КАК УидОбъекта
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.УидОбъекта В(&УникальныеИдентификаторыУслуги)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|ИТОГИ ПО
	|	УидОбъекта"; 
	Запрос.УстановитьПараметр("УникальныеИдентификаторыУслуги", УникальныеИдентификаторыУслуги);
	ВыборкаУИД = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	
	Результат = Новый Соответствие;
	
	Пока ВыборкаУИД.Следующий() Цикл
		
		Выборка = ВыборкаУИД.Выбрать();
		ИсторияКомментариев = Новый Массив;
		
		Пока Выборка.Следующий() Цикл			
			
			СтруктураКомментария = Новый Структура("date,comment, author");
			СтруктураКомментария.date = Формат(Выборка.Период, "ДЛФ=DT");
			СтруктураКомментария.comment = Выборка.Комментарий;
			СтруктураКомментария.author = Выборка.Автор;
			ИсторияКомментариев.Добавить(СтруктураКомментария);
			
		КонецЦикла;  
		
		Результат.Вставить(ВыборкаУИД.УидОбъекта, ИсторияКомментариев);
	КонецЦИкла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТегиПоФото(Параметры) Экспорт 
	
	Фото = Справочники.КартотекаПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(Параметры.guid));
	
	ЗапросТеги = Новый Запрос;
	ЗапросТеги.Текст = "ВЫБРАТЬ
	|	lvlapp_Теги.Наименование КАК Наименование,
	|	lvlapp_Теги.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.lvlapp_Теги КАК lvlapp_Теги
	|ГДЕ
	|	lvlapp_Теги.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	lvlapp_ТегиФотоснимков.Тег КАК Тег,
	|	lvlapp_ТегиФотоснимков.Фото КАК Фото,
	|	lvlapp_ТегиФотоснимков.Тег.Наименование КАК Наименование,
	|	lvlapp_ТегиФотоснимков.ДатаДобавления КАК ДатаДобавления
	|ИЗ
	|	РегистрСведений.lvlapp_ТегиФотоснимков КАК lvlapp_ТегиФотоснимков
	|ГДЕ
	|	lvlapp_ТегиФотоснимков.Фото = &Фото
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДобавления";
	ЗапросТеги.УстановитьПараметр("Фото", Фото);
	РезультатТеги = ЗапросТеги.ВыполнитьПакет();
	
	РезультатВсеТеги = РезультатТеги[0].Выгрузить();
	РезультатТегиПоФото = РезультатТеги[1].Выгрузить();
	
	СтруктураОтвет = Новый Структура;
	
	МассивВсеТеги = Новый Массив;
	
	Для Каждого СтрокаТег из РезультатВсеТеги Цикл 
		
		СтруктураТег = Новый Структура;
		СтруктураТег.Вставить("guid", Строка(СтрокаТег.Ссылка.УникальныйИдентификатор()));
		СтруктураТег.Вставить("name", СтрокаТег.Наименование);
		
		МассивВсеТеги.Добавить(СтруктураТег);
		
	КонецЦикла;                          
	
	СтруктураОтвет.Вставить("allArrayTags", МассивВсеТеги); 
	
	МассивТегиПоФото = Новый Массив;
	
	Для Каждого СтрокаТег из РезультатТегиПоФото Цикл 
		
		СтруктураТег = Новый Структура;
		СтруктураТег.Вставить("guid", Строка(СтрокаТег.Тег.УникальныйИдентификатор()));
		СтруктураТег.Вставить("name", СтрокаТег.Наименование);
		
		МассивТегиПоФото.Добавить(СтруктураТег);
		
	КонецЦикла;  
	
	СтруктураОтвет.Вставить("arrayTagsByPhoto", МассивТегиПоФото); 
	
	Возврат СтруктураОтвет;
	
КонецФункции

Функция НайтиПациента(Параметры) Экспорт  
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 200
	|	Картотека.Ссылка КАК Ссылка,
	|	Картотека.Наименование КАК Наименование,
	|	МедицинскиеКарты.Ссылка КАК СсылкаМедКарта,
	|	МедицинскиеКарты.Наименование КАК НаименованиеМедКарта,
	|	ДанныеПациентовСрезПоследних.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	Справочник.Картотека КАК Картотека
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МедицинскиеКарты КАК МедицинскиеКарты
	|		ПО Картотека.Ссылка = МедицинскиеКарты.Пациент
	|			И (МедицинскиеКарты.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПациентов.СрезПоследних КАК ДанныеПациентовСрезПоследних
	|		ПО Картотека.Ссылка = ДанныеПациентовСрезПоследних.Пациент
	|ГДЕ
	|	Картотека.ПометкаУдаления = ЛОЖЬ";
	
	Если ЗначениеЗаполнено(Параметры.name) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И Картотека.Наименование ПОДОБНО ""%" + Параметры.name + "%""";
		Запрос.УстановитьПараметр("Наименование", Параметры.name);
	КонецЕсли;          
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДанных = Новый Массив;
	
	Пока Выборка.Следующий() Цикл 
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("guid", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("name", Выборка.Наименование); 
		СтруктураДанных.Вставить("medicalCard", СформироватьСтруктуруОбязательныхРеквизитовСправочника(Выборка.СсылкаМедКарта));
		СтруктураДанных.Вставить("dateOfBirth", Формат(Выборка.ДатаРождения, "ДФ=dd.MM.yyyy"));
		СтруктураДанных.Вставить("yearsOld", ОбщиеМеханизмыКлиентСервер.ВозрастСтрокой(Выборка.ДатаРождения));
		СтруктураДанных.Вставить("patient", СформироватьСтруктуруОбязательныхРеквизитовСправочника(Выборка.Ссылка)); 
		
		МассивДанных.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции

Функция ПолучитьДанныеМедицинскогоДокумента(Параметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Жалобы","");
	Результат.Вставить("АнамнезЗаболевания","");
	Результат.Вставить("АнамнезЖизни",""); 
	Результат.Вставить("АллергологическийАнамнез","");  
	Результат.Вставить("ПринимаемыеЛекарственныеПрепараты","");  
	Результат.Вставить("КлиникоЭкспертныйАнамнез", "");   
	
	Возврат  Результат;
	
КонецФункции 

Функция ПолучитьЗначениеДополнительныхПараметровУслуг(УникальныеИдентификаторыУслуги,  ЗначениеВМассив = Истина) Экспорт
	
	Запрос = Новый Запрос;      
	Запрос.УстановитьПараметр("УникальныеИдентификаторыУслуги", УникальныеИдентификаторыУслуги);
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусыУслуг.УникальныйИдентификаторУслуги КАК УникальныйИдентификаторУслуги,
	|	lvlapp_ДополнительныеПараметрыУслугиУслуги.Ссылка КАК Параметр,
	|	lvlapp_ДополнительныеПараметрыУслугиУслуги.Ссылка.ТипЗначения КАК ТипЗначения,
	|	lvlapp_ДополнительныеПараметрыУслугиУслуги.Ссылка.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	lvlapp_ДополнительныеПараметрыУслугиУслуги.НомерСтроки КАК НомерСтроки,
	|	lvlapp_ДополнительныеПараметрыУслугиУслуги.Ссылка.Код КАК Код,
	|	lvlapp_ДополнительныеПараметрыУслугиУслуги.Ссылка.Порядок КАК Порядок
	|ПОМЕСТИТЬ ВТ_ПараметрыПоУслуге
	|ИЗ
	|	РегистрСведений.СтатусыУслуг КАК СтатусыУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.lvlapp_ДополнительныеПараметрыУслуги.Услуги КАК lvlapp_ДополнительныеПараметрыУслугиУслуги
	|		ПО СтатусыУслуг.Номенклатура = lvlapp_ДополнительныеПараметрыУслугиУслуги.Услуга
	|ГДЕ
	|	СтатусыУслуг.УникальныйИдентификаторУслуги В(&УникальныеИдентификаторыУслуги)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПараметрыПоУслуге.Параметр КАК Параметр,
	|	lvlapp_ЗначениеДополнительныхПараметровУслуг.Значение КАК Значение,
	|	ВТ_ПараметрыПоУслуге.ТипЗначения КАК ТипЗначения,
	|	ВТ_ПараметрыПоУслуге.УникальныйИдентификаторУслуги КАК УникальныйИдентификаторУслуги,
	|	ВТ_ПараметрыПоУслуге.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ВТ_ПараметрыПоУслуге.Параметр.Наименование КАК ПараметрНаименование,
	|	ВТ_ПараметрыПоУслуге.Порядок КАК Порядок
	|ИЗ
	|	ВТ_ПараметрыПоУслуге КАК ВТ_ПараметрыПоУслуге
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.lvlapp_ЗначениеДополнительныхПараметровУслуг КАК lvlapp_ЗначениеДополнительныхПараметровУслуг
	|		ПО ВТ_ПараметрыПоУслуге.УникальныйИдентификаторУслуги = lvlapp_ЗначениеДополнительныхПараметровУслуг.УникальныйИдентификаторУслуги
	|			И ВТ_ПараметрыПоУслуге.Параметр = lvlapp_ЗначениеДополнительныхПараметровУслуг.Параметр
	|
	|УПОРЯДОЧИТЬ ПО
	|	УникальныйИдентификаторУслуги,
	|	Порядок
	|ИТОГИ ПО
	|	УникальныйИдентификаторУслуги";
	
	
	ВыборкаУникальныйИдентификаторУслуги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Результат = Новый Соответствие;
	
	Пока ВыборкаУникальныйИдентификаторУслуги.Следующий() Цикл
		
		Если ЗначениеВМассив Тогда
			ЗначенияПараметров = Новый Массив;
		Иначе
			ЗначенияПараметров = Новый Соответствие;
		КонецЕсли;
		
		Результат.Вставить(ВыборкаУникальныйИдентификаторУслуги.УникальныйИдентификаторУслуги, ЗначенияПараметров);
		
		Выборка = ВыборкаУникальныйИдентификаторУслуги.Выбрать();
		Пока Выборка.Следующий() Цикл     
			Значение = Выборка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
			СтруктураЗначение = Новый Структура("value,type,name,id", Значение, Строка(Выборка.ТипЗначения), Выборка.ПараметрНаименование, Выборка.ИмяПредопределенныхДанных);
			Если ЗначениеВМассив Тогда
				ЗначенияПараметров.Добавить(СтруктураЗначение);	
			Иначе
				ЗначенияПараметров.Вставить(Выборка.ИмяПредопределенныхДанных, Значение);
			КонецЕсли;
		КонецЦИкла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

 Функция ПолучитьОплаченныеУслуги(УникальныеИдентификаторыУслуги) Экспорт
	
	Запрос = Новый Запрос;      
	Запрос.УстановитьПараметр("УникальныеИдентификаторыУслуги", УникальныеИдентификаторыУслуги);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СтатусыУслуг.УникальныйИдентификаторУслуги КАК УникальныйИдентификаторУслуги
	               |ИЗ
	               |	РегистрСведений.СтатусыУслуг КАК СтатусыУслуг
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	               |		ПО СтатусыУслуг.УникальныйИдентификаторУслугиСсылка = РасчетыСКлиентами.УникальныйИдентификаторУслугиСсылка
	               |			И (РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	               |			И (РасчетыСКлиентами.Сумма > 0)
	               |			И (РасчетыСКлиентами.Активность)
	               |ГДЕ
	               |	СтатусыУслуг.УникальныйИдентификаторУслуги В(&УникальныеИдентификаторыУслуги)";
	
	
	ВыборкаУникальныйИдентификаторУслуги = Запрос.Выполнить().Выбрать();	
	Результат = Новый Соответствие;
	
	Пока ВыборкаУникальныйИдентификаторУслуги.Следующий() Цикл
		Результат.Вставить(ВыборкаУникальныйИдентификаторУслуги.УникальныйИдентификаторУслуги, Истина);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти    

#Область СохранениеДанных

Функция ЗагрузитьФото(HTTPЗапрос) Экспорт
	
	
	СтруктураОтвет = Новый Структура("successful", Истина);
	
	НачатьТранзакцию();
		
	Результат = ПрочитатьСоставноеСодержимоеЗапроса(HTTPЗапрос); 
	СтруктураДанныФото = Результат.Получить("photo_service"); 
	
	СтруктураОтвет = Новый Структура("successful", Истина);
	
	Если СтруктураДанныФото = Неопределено Тогда 
		Возврат СтруктураОтвет;
	КонецЕсли;    
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Результат.Получить("photo_service_meta").Содержимое);
	ДанныеФото = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	guidУслуги = ДанныеФото.guidService;
	guidУслугиПациента = ДанныеФото.guidServiceRef; 
	guidПациента = ДанныеФото.guidPatient;
	
	PixelXDimension = "";
	PixelYDimension = "";
	DateTimeDigitized = "";
	
	ДанныеФото.Свойство("PixelXDimension", PixelXDimension);
	ДанныеФото.Свойство("PixelYDimension", PixelYDimension);
	ДанныеФото.Свойство("DateTimeDigitized", DateTimeDigitized);
	
	УникальныйИдентификаторУслуги = Новый УникальныйИдентификатор(guidУслуги);
	УслугаПациента = Справочники.УслугиПациентов.ПолучитьСсылку(Новый УникальныйИдентификатор(guidУслугиПациента)); 
	Картотека = Справочники.Картотека.ПолучитьСсылку(Новый УникальныйИдентификатор(guidПациента));
	
	
	ИмяФайла = формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss");                                                     
	
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("ВладелецФайлов", Картотека);
	ПараметрыДобавления.Вставить("ИмяБезРасширения", ИмяФайла);
	ПараметрыДобавления.Вставить("РасширениеБезТочки", "jpg");
	ПараметрыДобавления.Вставить("ВремяИзмененияУниверсальное", ""); 
	ПараметрыДобавления.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанныФото.Содержимое);  
	
	СсылкаНаФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыДобавления, АдресВХранилище);                          
	
	ПревьюДвоичныеДанные = ПолучитьПревьюКартинки(СтруктураДанныФото.Содержимое);
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("ВладелецФайлов", Картотека);
	ПараметрыДобавления.Вставить("ИмяБезРасширения", "prev" + ИмяФайла);
	ПараметрыДобавления.Вставить("РасширениеБезТочки", "jpg");
	ПараметрыДобавления.Вставить("ВремяИзмененияУниверсальное", ""); 
	ПараметрыДобавления.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ПревьюДвоичныеДанные);
	СсылкаНаФайлПревью = РаботаСФайлами.ДобавитьФайл(ПараметрыДобавления, АдресВХранилище);
	
	МенеджерЗаписи = РегистрыСведений.lvlapp_Фотоснимки.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Картотека = Картотека;
	МенеджерЗаписи.УслугаПациента = УслугаПациента;
	МенеджерЗаписи.УникальныйИдентификаторУслуги = УникальныйИдентификаторУслуги;
	МенеджерЗаписи.Фото = СсылкаНаФайл;
	МенеджерЗаписи.Превью = СсылкаНаФайлПревью;  
	МенеджерЗаписи.PixelXDimension = PixelXDimension; 
	МенеджерЗаписи.PixelYDimension = PixelYDimension; 
	МенеджерЗаписи.DateTimeDigitized = DateTimeDigitized;
	
	МенеджерЗаписи.Записать();    
	
	
	ЗафиксироватьТранзакцию();
	
	Возврат СтруктураОтвет;
	
КонецФункции

Функция ВключитьИсключитьФотоГалереяДоПосле(Параметры) Экспорт 
	
	МаксКолКартинок = 4;
	МассивФотографий = Новый Массив;
	
	Результат = Новый Структура("result, error, overflow", Ложь, "", Ложь);
	Картотека = Справочники.Картотека.ПолучитьСсылку(Новый УникальныйИдентификатор(Параметры.guidPatient));
	
	НачатьТранзакцию();
	
	Если  Параметры.IncludedInFavoriteGallery    Тогда
		
		Если  Параметры.сlear  Тогда			
			Набор = РегистрыСведений.lvlapp_Фотоснимки.СоздатьНаборЗаписей();
			Набор.Отбор.Картотека.Установить(Картотека);   
			Набор.Прочитать();
			Для Каждого СтрокаНабора ИЗ  Набор Цикл
				СтрокаНабора.ВключенВГалереюДоПосле = Ложь;	
			КонецЦикла;
			Набор.Записать();			
		Иначе
			
			Для Каждого Элемент ИЗ  Параметры.arrayPhotos Цикл
				Фото = Справочники.КартотекаПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.guid));
				МассивФотографий.Добавить(Фото);
			КонецЦикла; 
			
			Запрос = Новый Запрос;
			ЗАпрос.Текст = "ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(1), 0) КАК Количество
			|ИЗ
			|	РегистрСведений.lvlapp_Фотоснимки КАК lvlapp_Фотоснимки
			|ГДЕ
			|	lvlapp_Фотоснимки.Картотека = &Картотека
			|	И lvlapp_Фотоснимки.ВключенВГалереюДоПосле
			|	И НЕ lvlapp_Фотоснимки.ПометкаУдаления
			|	И НЕ lvlapp_Фотоснимки.Фото В (&МассивФотографий)";  
			
			Запрос.УстановитьПараметр("Картотека", Картотека);  
			Запрос.УстановитьПараметр("МассивФотографий", МассивФотографий);  
			
			ТекКол = 0;
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ТекКол = выборка.Количество;
			КонецЕсли;
			
			Если ТекКол +  МассивФотографий.Количество()> МаксКолКартинок Тогда
				Результат.overflow = Истина; 
				Результат.error = СтрШаблон("Максимально можно добавить %1 картинки", МаксКолКартинок);
				Возврат Результат; 
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;  
	
	МассивРезультат = Новый Массив;
	
	Для Каждого Элемент ИЗ Параметры.arrayPhotos  Цикл
		
		Картотека = Справочники.Картотека.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.guidPatient));
		УслугаПациента = Справочники.УслугиПациентов.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.guidServiceRef));
		УникальныйИдентификаторУслуги = Новый УникальныйИдентификатор(Элемент.guidService); 
		Фото = Справочники.КартотекаПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.guid));
		
		МенеджерЗаписи = РегистрыСведений.lvlapp_Фотоснимки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Картотека = Картотека;
		МенеджерЗаписи.УслугаПациента = УслугаПациента;
		МенеджерЗаписи.УникальныйИдентификаторУслуги = УникальныйИдентификаторУслуги;
		МенеджерЗаписи.Фото = Фото;
		МенеджерЗаписи.Прочитать();    
		
		МассивРезультат.Добавить(Элемент.guid);
		
		Если МенеджерЗаписи.Выбран() Тогда 
			МенеджерЗаписи.ВключенВГалереюДоПосле = Параметры.IncludedInFavoriteGallery;   			
			МенеджерЗаписи.Записать();  
		Иначе	                 
			
			ОтменитьТранзакцию();
			Результат.error =  "Не удалось выполнить операцию"; 
			Прервать;
			
		КонецЕсли; 
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();
	Результат.result = МассивРезультат;
	
	Возврат Результат;
	
КонецФункции

Функция СохранитьКомментарий(Параметры) Экспорт
	
	СтруктураОтвет = Новый Структура("result, comment, newComment", Ложь, "", Неопределено);
	
	Если не ЗначениеЗаполнено(Параметры.comment) Тогда
		СтруктураОтвет.comment = "Не заполнен комментарий";
		Возврат СтруктураОтвет;
	КонецЕсли;
	
	УникальныйИдентификаторУслуги = Новый УникальныйИдентификатор(Параметры.guidService); 
		
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатусыУслуг.Пациент КАК Пациент,
	|	СтатусыУслуг.УникальныйИдентификаторУслугиСсылка КАК УникальныйИдентификаторУслугиСсылка,
	|	СтатусыУслуг.Заказ КАК Заказ
	|ИЗ
	|	РегистрСведений.СтатусыУслуг КАК СтатусыУслуг
	|ГДЕ
	|	СтатусыУслуг.УникальныйИдентификаторУслуги = &УникальныйИдентификаторУслуги"; 
	
	Запрос.УстановитьПараметр("УникальныйИдентификаторУслуги", УникальныйИдентификаторУслуги);
	 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
			
		МенеджерЗаписи = РегистрыСведений.Комментарии.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = ТекущаяДата();
		МенеджерЗаписи.ТипКомментария = Перечисления.ТипыКомментариев.МедицинскаяУслуга;
		МенеджерЗаписи.СсылкаНаОбъект = Выборка.УникальныйИдентификаторУслугиСсылка;
		МенеджерЗаписи.УидОбъекта = УникальныйИдентификаторУслуги;
		МенеджерЗаписи.Комментарий = Параметры.comment;
		МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		МенеджерЗаписи.Записать();     
		
		НовыйКомментарий = Новый Структура;
		НовыйКомментарий.Вставить("date",  Формат(ТекущаяДата(), "ДЛФ=DT")); 
		НовыйКомментарий.Вставить("comment", Параметры.comment);
		НовыйКомментарий.Вставить("author", Строка(ПараметрыСеанса.ТекущийПользователь));
		
		СтруктураОтвет.result = Истина;
		СтруктураОтвет.comment = "Комментарий записан";
		СтруктураОтвет.newComment = НовыйКомментарий; 
		Возврат СтруктураОтвет;
		
	Иначе
		
		СтруктураОтвет.comment = "Не найдена строка заказа";
		Возврат СтруктураОтвет;
		
	КонецЕсли;
	
КонецФункции

Функция ДобавитьТегПоФото(Параметры) Экспорт 
	
	Фото = Справочники.КартотекаПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(Параметры.guidPhoto));
	
	Если ЗначениеЗаполнено(Параметры.guidTag) Тогда
		
		Тег = Справочники.lvlapp_Теги.ПолучитьСсылку(Новый УникальныйИдентификатор(Параметры.guidTag));
		
	Иначе
		
		Тег = Справочники.lvlapp_Теги.НайтиПоНаименованию(Параметры.nameTag,Истина);
		
		Если Тег.Пустая() Тогда
			ТегОбъект = Справочники.lvlapp_Теги.СоздатьЭлемент();
			ТегОбъект.Наименование = Параметры.nameTag;
			ТегОбъект.Записать(); 
		КонецЕсли;
		
		Тег = ТегОбъект.Ссылка;
		
	КонецЕсли;                 
	
	МенеджерЗаписи = РегистрыСведений.lvlapp_ТегиФотоснимков.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Фото = Фото;
	МенеджерЗаписи.Тег = Тег;
	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.ДатаДобавления = ТекущаяДата();
	МенеджерЗаписи.Записать(); 
	
	СтруктураОтвет = ПолучитьТегиПоФото(Новый Структура("guid", Параметры.guidPhoto));
	
	Возврат СтруктураОтвет;
	
КонецФункции

Функция УдалитьТегПоФото(Параметры) Экспорт 
	
	Фото = Справочники.КартотекаПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(Параметры.guidPhoto));
	Тег = Справочники.lvlapp_Теги.ПолучитьСсылку(Новый УникальныйИдентификатор(Параметры.guidTag));
	
	МенеджерЗаписи = РегистрыСведений.lvlapp_ТегиФотоснимков.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Фото = Фото;
	МенеджерЗаписи.Тег = Тег;         
	
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
	СтруктураОтвет = ПолучитьТегиПоФото(Новый Структура("guid", Параметры.guidPhoto));
	Возврат СтруктураОтвет;
	
КонецФункции

Функция УдалитьФото(МассивФото) Экспорт  
	
	Результат =  Новый Массив;
	
	Для Каждого Элемент ИЗ  МассивФото Цикл
		
		Картотека = Справочники.Картотека.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.guidPatient));
		УслугаПациента = Справочники.УслугиПациентов.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.guidServiceRef));
		УникальныйИдентификаторУслуги = Новый УникальныйИдентификатор(Элемент.guidService); 
		Фото = Справочники.КартотекаПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.guid));
		
		МЗ = РегистрыСведений.lvlapp_Фотоснимки.СоздатьМенеджерЗаписи();
		МЗ.Картотека =Картотека;
		МЗ.УслугаПациента = УслугаПациента;
		МЗ.УникальныйИдентификаторУслуги = УникальныйИдентификаторУслуги;
		МЗ.Фото = Фото;
		
		МЗ.Прочитать();
		
		Если МЗ.Выбран() Тогда 
			
			МЗ.ПометкаУдаления = Истина;
			МЗ.Записать();
			
			Попытка //файл может быть захвачен для редактирования и упадет 
				МЗ.Фото.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);  
			Исключение
			КонецПопытки;
			
			Если ЗначениеЗаполнено(МЗ.Превью) Тогда
				Попытка //файл может быть захвачен для редактирования и упадет
					МЗ.Превью.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;  
		
		Результат.Добавить(Элемент.guid);
		
	КонецЦикла;
	
	Возврат Новый Структура("result, error",Результат, "");
	
КонецФункции

Функция СохранитьЗначениеПараметра(Параметры) Экспорт   
	
	УникальныйИдентификаторУслуги = Новый УникальныйИдентификатор(Параметры.guidService); 
	
	МЗ = РегистрыСведений.lvlapp_ЗначениеДополнительныхПараметровУслуг.СоздатьМенеджерЗаписи();
	МЗ.УникальныйИдентификаторУслуги = УникальныйИдентификаторУслуги;
	МЗ.Параметр = ПланыВидовХарактеристик.lvlapp_ДополнительныеПараметрыУслуги[Параметры.id]; 
	МЗ.Значение = Параметры.value;
	МЗ.ДатаУстановки = ТекущаяДата();
	МЗ.Записать();
	
	Возврат  Новый Структура("result", Истина);
	
КонецФункции

#КонецОбласти

#Область ФормированиеПечатныхФорм

Функция СформироватьПредставлениеВыпискиНаСервере(МедицинскаяКартаИлиПациент, Подразделение = Неопределено, Специальность = Неопределено, МассивТиповМД = Неопределено)
	
	////Если ДатаОкончания не заполнено, то устанавливаем максимально возможную дату 
	ДатаНачала = '00010101000000';
	ДатаОкончания_ = '39991231235959';
	
	ТабДокумент = Новый ТабличныйДокумент();
	
	Макет_ = Обработки.ВыпискаИзМедицинскойКарты.ПолучитьМакет("ШапкаВыписки");
	Область_ = Макет_.ПолучитьОбласть("СтрокаПациента");
	
	Если ТипЗнч(МедицинскаяКартаИлиПациент) = Тип("СправочникСсылка.МедицинскиеКарты") Тогда
		Пациент_ = МедицинскаяКартаИлиПациент.Пациент;
	Иначе
		Пациент_ = МедицинскаяКартаИлиПациент;
	КонецЕсли;
	
	ДанныеПациента_ = Регистратура.ПолучитьДанныеПациента(Пациент_);
	Текст_ = ДанныеПациента_.ФИО.ПредставлениеПолное + ", " + ДанныеПациента_.ФИО.Пол + ", " + ДанныеПациента_.ФИО.Возраст + ".";
	
	Область_.Параметры.СтрокаПациента = Текст_;
	Область_.Параметры.ПараметрРасшифровки = МедицинскаяКартаИлиПациент;
	
	ТабДокумент.Вывести(Область_);
	
	ЕстьДанныеПоЛабораторииРЛИС_ = Ложь;
	
	ЕстьДанныеПоЛаборатории_ = Ложь;
	Результат_ = Обработки.ВыпискаИзМедицинскойКарты.СформироватьТабличныйДокументДляЛаборатории(
	МедицинскаяКартаИлиПациент,
	ДатаНачала,
	ДатаОкончания_,
	Подразделение,
	Специальность,
	МассивТиповМД,
	"ЛабораторияДеревом",
	ЕстьДанныеПоЛаборатории_
	);
	Результат_.Область(1, , Результат_.ВысотаТаблицы, ).СоздатьФорматСтрок();
	ТабДокумент.Вывести(Результат_);
	
	ЕстьДанныеПоЛисткамНетрудоспособности_ = Ложь;
	Результат_ = Обработки.ВыпискаИзМедицинскойКарты.СформироватьТабличныйДокументЛисткиНетрудоспособности(
	МедицинскаяКартаИлиПациент,
	ДатаНачала,
	ДатаОкончания_,
	Подразделение,
	Специальность,
	"ЛисткиНетрудоспособностиДеревом",
	ЕстьДанныеПоЛисткамНетрудоспособности_
	);
	Результат_.Область(1, , Результат_.ВысотаТаблицы, ).СоздатьФорматСтрок();
	ТабДокумент.Вывести(Результат_);
	
	ЕстьДанныеПоУслугам_ = Ложь;
	Результат_ = Обработки.ВыпискаИзМедицинскойКарты.СформироватьТабличныйДокумент(
	МедицинскаяКартаИлиПациент,
	ДатаНачала,
	ДатаОкончания_,
	Подразделение,
	Специальность,
	МассивТиповМД,
	"ВыпискаДеревом",
	ЕстьДанныеПоУслугам_
	);
	Результат_.Область(1, , Результат_.ВысотаТаблицы, ).СоздатьФорматСтрок();
	ТабДокумент.Вывести(Результат_);
	
	// Переопределение выписки
	ЕстьДругиеДанные_ = Ложь;
	ОбработчикиСобытия_ = ПрограммныеСобытия.ОбработчикиСобытия(
	"ФункциональныеПодсистемы.УслугиПациентов\ПросмотрЭМКСформироватьТабличныйДокумент"
	);
	Для Каждого Обработчик_ Из ОбработчикиСобытия_ Цикл
		ЕстьДанные_ = Ложь;
		Результат_ = Обработчик_.Модуль.ПросмотрЭМКСформироватьТабличныйДокумент(
		МедицинскаяКартаИлиПациент,
		ДатаНачала,
		ДатаОкончания_,
		Подразделение,
		Специальность,
		МассивТиповМД,
		"ВыпискаДеревом",
		ЕстьДанные_
		);
		Результат_.Область(1, , Результат_.ВысотаТаблицы, ).СоздатьФорматСтрок();
		ТабДокумент.Вывести(Результат_);
		
		Если ЕстьДанные_ Тогда
			ЕстьДругиеДанные_ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьДанныеПоЛисткамНетрудоспособности_ = Ложь 
		И ЕстьДанныеПоЛаборатории_ = Ложь 
		И ЕстьДанныеПоЛабораторииРЛИС_ = Ложь 
		И ЕстьДанныеПоУслугам_ = Ложь 
		И ЕстьДругиеДанные_ = Ложь 
		Тогда
		ТД_ = Обработки.ВыпискаИзМедицинскойКарты.ПолучитьМакет("МакетНетДанных");
		ТабДокумент.Вывести(ТД_);
	КонецЕсли; 
	
	Для Кол = 2 По ТабДокумент.ШиринаТаблицы Цикл
		ШиринаКолонки = 0;
		Для Стр = 4 По ТабДокумент.ВысотаТаблицы Цикл
			Область = ТабДокумент.Область("R"+Формат(Стр,"ЧГ=0")+"C"+Формат(Кол,"ЧГ=0"));
			ШиринаОбласти = Область.Отступ+СтрДлина(СокрЛП(Область.Текст));
			ШиринаКолонки = Макс(ШиринаКолонки, ШиринаОбласти + 3);
			Если ШиринаКолонки > 60 Тогда
				Область.ШиринаКолонки = 60;
			Иначе
				Область.ШиринаКолонки = ШиринаКолонки;
			КонецЕсли;
		Конеццикла;
	КонецЦикла;
	
	Возврат ТабДокумент;
КонецФункции

Функция СформироватьЭлектронныйМедицинскийДокумент(guidMedicalDocument) 
	
	Если не ЗначениеЗаполнено(guidMedicalDocument) Тогда 
		ТекстHTML = ПолучитьПустойHTML("Медицинский документ отсутсвует");
		Возврат ТекстHTML;
	КонецЕсли;                                                            
	
	МедицинскийДокумент = Документы.МедицинскийДокумент.ПолучитьСсылку(Новый УникальныйИдентификатор(guidMedicalDocument));
	
	CDAДокумент_ = Документы.МедицинскийДокумент.ПолучитьCDAДокумент(МедицинскийДокумент);
	XMLДокумент_ = Документы.МедицинскийДокумент.ПолучитьТелоМД(CDAДокумент_); 
	
	Если XMLДокумент_ = Неопределено Тогда
		
		Возврат ПолучитьПустойHTML("Не удалось получить тело документ!");
		
	КонецЕсли;
	
	
	СтрокаДанные = МедицинскийДокумент.CDAДокументы.Найти(CDAДокумент_, "ТелоМедДокумента");
	
	ИдентификаторДокумента = "";  
	ТекущийВизуализатор_ = ШаблоныМедицинскихДокументов.ПолучитьСсылкуВизуализатора(СтрокаДанные.ШаблонМедицинскогоДокумента);
	
	Попытка
		
		//ПолныйДокумент_ = ДинамическоеПолеФормы.ПолучитьРеквизит(Форма, ДинПоле, "ПолныйДокумент");
		//ВыводитьШапку_ = ДинамическоеПолеФормы.ПолучитьРеквизит(Форма, ДинПоле, "ВыводитьШапку");   
		
		ПолныйДокумент_ = Истина;
		ВыводитьШапку_ = Ложь;
		
		// Если идентификатордокумента не является ссылкой на документ, то будем считать, что просматривается документ 
		// в режиме тестирования, а значит базовый адрес будет на временное хранилище.
		Если ИдентификаторДокумента = Неопределено ИЛИ ИдентификаторДокумента = "" ИЛИ ИдентификаторДокумента.Пустая() Тогда
			БазовыйАдрес_ = "e1cib/tempstorage/";
		Иначе			
			БазовыйАдрес_ = ШаблоныМедицинскихДокументовПереопределяемый.ОпределитьБазовыйАдрес(ИдентификаторДокумента);
		КонецЕсли;
		
		РезультатПреобразования = ШаблоныМедицинскихДокументов.CDA2HTML(
		XMLДокумент_,
		ТекущийВизуализатор_,
		БазовыйАдрес_,
		ШаблоныМедицинскихДокументовПереопределяемый.ДокументГотов(ИдентификаторДокумента),
		ПолныйДокумент_,
		Неопределено,
		Новый УникальныйИдентификатор,
		МедицинскийДокумент,
		ВыводитьШапку_,
		,
		Неопределено
		);
		РезультатПреобразования = СтрЗаменить(РезультатПреобразования, "<?xml version=""1.0""?>", "");
		
		//Возврат ДинПолеОтображениеМДПоместитьHTMLВоВременноеХранилище(РезультатПреобразования);
		Возврат РезультатПреобразования;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
		"ДинПолеОтображениеМД.ПоместитьHTMLДокументВоВременноеХранилище",
		УровеньЖурналаРегистрации.Ошибка,
		,
		ИдентификаторДокумента,
		ПодробноеПредставлениеОшибки(Инфо)
		);		
		Возврат Инфо;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

